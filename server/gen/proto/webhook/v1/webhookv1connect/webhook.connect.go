// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/webhook/v1/webhook.proto

package webhookv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/emahiro/qrurl/server/gen/proto/webhook/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// LineWebhookServiceName is the fully-qualified name of the LineWebhookService service.
	LineWebhookServiceName = "webhook.v1.LineWebhookService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LineWebhookServiceWebhookProcedure is the fully-qualified name of the LineWebhookService's
	// Webhook RPC.
	LineWebhookServiceWebhookProcedure = "/webhook.v1.LineWebhookService/Webhook"
)

// LineWebhookServiceClient is a client for the webhook.v1.LineWebhookService service.
type LineWebhookServiceClient interface {
	Webhook(context.Context, *connect_go.Request[v1.LineWebhookRequest]) (*connect_go.Response[v1.LineWebhookResponse], error)
}

// NewLineWebhookServiceClient constructs a client for the webhook.v1.LineWebhookService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLineWebhookServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) LineWebhookServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &lineWebhookServiceClient{
		webhook: connect_go.NewClient[v1.LineWebhookRequest, v1.LineWebhookResponse](
			httpClient,
			baseURL+LineWebhookServiceWebhookProcedure,
			opts...,
		),
	}
}

// lineWebhookServiceClient implements LineWebhookServiceClient.
type lineWebhookServiceClient struct {
	webhook *connect_go.Client[v1.LineWebhookRequest, v1.LineWebhookResponse]
}

// Webhook calls webhook.v1.LineWebhookService.Webhook.
func (c *lineWebhookServiceClient) Webhook(ctx context.Context, req *connect_go.Request[v1.LineWebhookRequest]) (*connect_go.Response[v1.LineWebhookResponse], error) {
	return c.webhook.CallUnary(ctx, req)
}

// LineWebhookServiceHandler is an implementation of the webhook.v1.LineWebhookService service.
type LineWebhookServiceHandler interface {
	Webhook(context.Context, *connect_go.Request[v1.LineWebhookRequest]) (*connect_go.Response[v1.LineWebhookResponse], error)
}

// NewLineWebhookServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLineWebhookServiceHandler(svc LineWebhookServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(LineWebhookServiceWebhookProcedure, connect_go.NewUnaryHandler(
		LineWebhookServiceWebhookProcedure,
		svc.Webhook,
		opts...,
	))
	return "/webhook.v1.LineWebhookService/", mux
}

// UnimplementedLineWebhookServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLineWebhookServiceHandler struct{}

func (UnimplementedLineWebhookServiceHandler) Webhook(context.Context, *connect_go.Request[v1.LineWebhookRequest]) (*connect_go.Response[v1.LineWebhookResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("webhook.v1.LineWebhookService.Webhook is not implemented"))
}
